#!/bin/make -f

# #######################################################################
#			User tunable options
# #######################################################################

#
# Prepend line.  used for compiling with things like nice.
#
# PRE= nice -10

#
# Optimizations
# -O			General optimizations, recomended.
# -O2			Heavier optimizations, use at own risk.
#
# ProtoMUCK will now compile 99.8% warning free with -Wall turned on.
#   -Hinoserm, 7-31-2003. 
#
# -g used to be set here, and it's still the default. Use --with-debug=#
# to set a higher debugging level, or --without-debug to not use -g at all.
# Note that --enable-debug=all overrides your -O setting, as it forces -O0.
#   -Davin

OPTIM=-Wall -O2 -U_FORTIFY_SOURCE

#
# Paths
#

# Right below the src/include directories
ROOT= ..

# Where the include files are
INCLUDE= ./inc
# Destination for binaries
DEST=${ROOT}/game

# #######################################################################
# 		Variables set by the configure script.
# #######################################################################
CC=@CC@
CXX=@CXX@
DEFS=@DEFS@
LIBR=@LIBS@

# #######################################################################
#  	   Usualy don't need to change anything past here.
# #######################################################################

#
# Include path, Cflags...
#
CFLAGS=${OPTIM} @DEBUG_FLAGS@ ${DEFS} -I${INCLUDE} @INC@ @INCL@
CXXFLAGS=${OPTIM} ${DEFS} -I${INCLUDE} @INC@ @INCL@

#
# for saving old copies.
#
MV= -mv -f
RM= -rm -f

#
# Misc stuff for odd targets.
#
SRC_PREFIX=
MAKE= make
MKTAGS= ctags

##########################################################################
#            You should not have to change anything below here           #
##########################################################################

MISCSRC= Makefile ChangeLog COPYING

CSRC= array.c boolexp.c cgi.c compile.c compress.c create.c db.c  \
	debugger.c disassem.c diskprop.c edit.c events.c game.c hashtab.c  \
	help.c inst.c interp.c log.c look.c match.c mcp.c mcppkgs.c        \
	mcpgui.c mfuns.c mfuns2.c mfuns3.c msgparse.c move.c mufevent.c    \
	crt_malloc.c oldcompress.c player.c predicates.c p_array.c         \
	p_connects.c p_db.c p_error.c p_float.c p_file.c p_html.c p_http.c \
        p_math.c p_mcp.c p_misc.c p_muf.c p_mysql.c p_props.c p_socket.c   \
        p_stack.c p_strings.c p_system.c p_regex.c p_json.c \
      property.c propdirs.c props.c random.c rob.c set.c          \
      signal.c smatch.c speech.c strftime.c stringutil.c timequeue.c     \
      timestamp.c tune.c unparse.c utils.c wiz.c reg.c netresolve.c      \
      sanity.c newhttp.c version.c sha1.c json.c

MSRC= olddecomp.c reconst.c interface.c
SRC= ${MISCSRC} ${CSRC} ${MSRC}

COBJ=  array.o boolexp.o cgi.o compile.o compress.o create.o db.o  \
	debugger.o disassem.o diskprop.o edit.o events.o game.o hashtab.o  \
	help.o inst.o interp.o log.o look.o match.o mcp.o mcppkgs.o        \
	mcpgui.o mfuns.o mfuns2.o mfuns3.o msgparse.o move.o mufevent.o    \
	crt_malloc.o oldcompress.o player.o predicates.o p_array.o         \
	p_connects.o p_db.o p_error.o p_float.o p_file.o p_html.o p_http.o \
        p_math.o p_mcp.o p_misc.o p_muf.o p_mysql.o p_props.o p_socket.o   \
	p_stack.o p_strings.o p_system.o p_regex.o p_json.o \
      property.o propdirs.o props.o random.o rob.o signal.o set.o \
      smatch.o speech.o strftime.o stringutil.o timequeue.o              \
      timestamp.o tune.o unparse.o utils.o wiz.o reg.o netresolve.o sanity.o newhttp.o version.o \
      sha1.o json.o

LOBJ= copyright.o
MOBJ= olddecomp.o reconst.o interface.o resolver.o topwords.o 
EOBJ= oldcompress.o diskprop.o property.o propdirs.o props.o stringutil.o \
	unparse.o utils.o predicates.o db.o boolexp.o log.o

OBJ= ${COBJ} ${ROBJ} ${MOBJ}
TARGETS= protomuck resolver

.SUFFIXES: .c .o

.c.o:
	${PRE} ${CC} ${CFLAGS} -c $*.c

all:    ${TARGETS}

muck:	protomuck

protomuck:        ${P} ${COBJ} interface.o
	${MV} protomuck protomuck~
	@echo "`bash -c set | grep OSTYPE`"
	@if [ "`bash -c set | grep OSTYPE`" = "OSTYPE=cygwin" ]; then \
         echo ${PRE} ${CC} -Wl,--heap,268435456,--stack,16777216 ${CFLAGS} -o protomuck ${COBJ} interface.o ${LIBR}; \
	 ${PRE} ${CC} -Wl,--heap,268435456,--stack,16777216 ${XXCFLAGS} -o protomuck ${COBJ} interface.o ${LIBR}; \
	else \
         echo ${PRE} ${CC} ${CFLAGS} -o protomuck ${COBJ} interface.o ${LIBR}; \
	 ${PRE} ${CC} ${CFLAGS} -o protomuck ${COBJ} interface.o ${LIBR}; \
	fi

resolver:	resolver.o
	${PRE} ${CC} ${CFLAGS} -o resolver resolver.o ${LIBR}

reslvd:	reslvd.o
	${PRE} ${CC} ${CFLAGS} -o reslvd reslvd.o ${LIBR}

mancheck:	mancheck.o
	${PRE} ${CC} ${CFLAGS} -o mancheck mancheck.o ${LIBR}

topwords: topwords.o hashtab.o
	${RM} topwords
	${CC} ${CFLAGS} -o topwords topwords.o hashtab.o

olddecompress: olddecomp.o oldcompress.o
	${RM} olddecompress
	${CC} ${CFLAGS} -o olddecompress olddecomp.o oldcompress.o

cert game/server.pem:
	@if grep "^#define USE_SSL" inc/autoconf.h > /dev/null; then \
		echo; \
		if [ -r ../game/data/server.pem ]; then \
			echo "Will not overwrite game/data/server.pem"; \
			echo "Remove that file and do 'make cert' again";\
			echo "to create a new certificate."; \
			echo; \
		else \
			if [ ! -r ${HOME}/.rnd ]; then \
			    openssl rand -rand /etc/hosts:/etc/passwd 0; \
			fi; \
			echo "Creating secure certificate. Please answer all the questions."; \
			echo "The key and certificate will be stored in the game/data/server.pem file."; \
			echo; \
			openssl req -x509 -nodes -out game/data/server.pem -keyout ../game/data/server.pem -config protomuck.cnf -new -days 730; \
		fi; \
	fi


#############################################################
# Funky stuff for debugging and coding work.
#

saber_src:
	#load ${CFLAGS} ${CSRC}

saber_obj: ${CSRC} interface.o
	#load ${OBJ} interface.o

tags: ${CSRC} ${MSRC}
	${MKTAGS} ${CSRC} interface.c inc/*.h

sources: ${SRC}

names:
	@for i in ${SRC}; do echo ${SRC_PREFIX}$$i; done


########################################################
# Cleanup stuff.
#

test:	protomuck
	cp protomuck ${HOME}/proto/game/protomuck

clean:
	${RM} ${OBJ} core version.o ${SOBJ} resolver.o reslvd.o

cleaner: clean
	${RM} Makefile config.status config.cache inc/autoconf.h
	${RM} ${TARGETS} config.log
	cp Makefile.cfg Makefile
	@if test -d "autom4te.cache"; then \
		rm -Rf ./autom4te.cache; \
 	fi

clobber: cleaner
	${RM} tags *~ *.bak *.orig

distclean: cleaner

nuke:
	${RM} ${OBJ} core vesion.o
	${RM} ${TARGETS} tags *~ *.bak *.orig
	${RM} Makefile config.status inc/autoconf.h
	cp Makefile.cfg Makefile
	-${CLEAN} *

install: all
	${MV} ${TARGETS} ${DEST}
	@echo "To prepare a database for use, use 'make setup'."

setup:
	./setup

# #######################################################################
# #######################################################################

# DO NOT DELETE THIS LINE -- make depend depends on it.




