~~~
dumpwarn_mesg
Message shown to all players before data-base saves according to 
dump_warntime.
~~~
deltawarn_mesg
Message shown to all players before delta-saves according to 
dump_warntime.
~~~
dumpdeltas_mesg
Message shown to all players before delta-saves begin.
~~~
dumping_mesg
Message shown to all players at the start of a full data base save.
~~~
dumpdone_mesg
Message shown to all players once dump or delta save is done.
~~~
huh_mesg
Message seen when a player enters a line the server doesn't understand.
Please see 'help huh' for more information.
~~~
leave_message
Message shown to players when they QUIT.
~~~
idleboot_message
Message shown to players when they are idlebooted.
~~~
noperm_mesg
Message shown when players do not have permission to do something.
~~~
noguest_mesg
Message shown to characters set G when they do non-allowed actions.
~~~
penny
Single monetary unit.
~~~
pennies
Plural monetary units.
~~~
cpenny
Capital single monetary unit.
~~~
cpennies
Capital plural monetary units.
~~~
muckname
Change this to the name of your MUCK.
~~~
userflag_name
This is a string that will give the MOBILE flag, an alternate
name.  You may then set and test for this flag by the name you
enter here, and it will be displayed as such in 'examine'.  You
may use this if your MUCK requires a flag for its own use.  The
'userflag' has no effect on anything it is set on except as 
defined in your MUF.  In all cases, you may still test for the
userflag using MOBILE, OFFER, or ?, and it parses to '?' in
your dbref.  Also see the 'userflag_mlev' tune and 'help mobile'.
~~~
mailserver
No longer has any in-server function since the removal of @hopper. 
However, since many email related MUF programs depend on it being 
here, it has been left in.
~~~
servername
Set this to the server name. Such as tnt.dynodns.net.
~~~
reg_email
No longer has any in-server function since the removal of @hopper. Has 
been left in to account for any MUF programs that depend on this field.
~~~
proplist_counter_fmt
Used to display the system standard naming format for proplists. This string 
specifies the format of the namee of the property that the count of list items 
is stored in. Any instance of P will be replaced by the proplist name. The 
default is "P#".
~~~
proplist_entry_fmt
Used to specify the system standard format for proplists. Any instance of P in
the string will be replaced by the proplist name. Any instance of N in the 
string will be replaced by the item's number. The default is "P#/N".
~~~
unidle_command
This is a string that players can enter into the MUCK without
actually unidling. Designed to allow players to set up unidle
triggers to keep connections behind routers and firewalls from
getting dropped when they idle. If they set up an idle trigger
that sends the word that this @tune setting is set to, then
they can keep their connection from dropping without unidling
their characters on the MUCK. Note that whatever this command
is, it does not get processed as input by the player, so do not
use anything that is already a command players can use. The
allow_unidle @tune option must be set to yes.
~~~
unidle_command_msg
This is a message that will be printed out to players when
they enter the unidle_command string.  This is to further
assist with connections that constantly drop if a player
sits idle for too long.  You may disable the printing of a
message by setting this to '-' without the quotation marks.
~~~
ssl_keyfile_passwd
This field provides a password for commercial or personal SSL 
certificates that require a password or passphrase for their use.
~~~
reslvd_address
This is a string that describes the host and port of the reslvd
daemon, in <host>:<port> format. If either the host or port are
missing, ProtoMUCK defaults to the values specified in config.h
under RESOLVER_HOST and RESOLVER_PORT. Setting this option to
NULL disables the reslvd connection. Note that, while a hostname
will work, an IP address is recommended, as the muck will hang
while the name is initially resolved.
~~~
sex_prop
Specifies the property that the MUCK uses to determine the sex of a
player, primarily used by pronoun substitutions.
~~~
dump_interval
Time between dumps or delta-dumps.
~~~
dump_warntime
Give a warning about pending saves this many minutes in advance.
~~~
monolithic_interval
If deltas are defined, this sets the frequency of full dumps.
~~~
clean_interval
This controls how often unused MUF programs are purged from RAM.
I.e., if a MUF program hasn't been used for 15 minutes, it is cleaned out.
If the MUCK is running in DISKBASED mode, this determines how long an
object or property remains in RAM before it is cleaned out.
~~~
aging_time
Unused time before obj shows as old in in-server searches such as 
@find.
~~~
connidle
This sets how idle a connection has to be on the login screen before it
gets dropped.
~~~
maxidle
How much time a player can idle before being booted if idleboot is on.
~~~
idletime
How much time until a player is considered to be idle by the MUCK.
Once a player reaches this point, an IDLE flag gets put on the player,
and the _idle/ propqueues get called. 
~~~
cron_interval
Frequency at which to run the MUF set in cron_prog.
~~~
archive_interval
Frequency at which to run full site backups. Needs to at least be
longer than the #define for ARCHIVE_DELAY (30 minutes by default).
A good frequency is about once per week, though sites that see a
lot more changes may prefer more frequent archives. 
See: 'help @autoarchive' for details
~~~
shutdown_delay
If set to a positive time value, @shutdown and @restart will:

1) toggle the wizonly flag
2) trigger the programs in the @shutdown propqueue on #0
3) send running all processes a SHUTDOWN event
4) shut down the game after the configured time has elapsed

All new processes started during a delayed shutdown cycle will
already have a SHUTDOWN event queued. A delayed @shutdown can
be aborted with a "=abort" parameter to @shutdown or @restart,
or be skipped entirely with "=now".
~~~
mainport
The main telenet port to access the MUCK.
~~~
sslport
The port SSL-aware clients use for secured connections.
~~~
wwwport
The port web browsers should access to interact with the MUCK.
~~~
puebloport
Port Pueblo users should connect to for Pueblo enhancements.
~~~
max_object_endowment
The maximum value an object can be created with.
~~~
object_cost
The cost of creating things with the in-server @create.
~~~
exit_cost
The cost of creating exits with the in-server @open or @action.
~~~
link_cost
The cost of linking exits with the in-server @link.
~~~
room_cost
The cost of creating rooms with the in-server @dig.
~~~
lookup_cost
The cost of looking up a player's name for prims like match
or partial_match.
~~~
max_pennies
The maximum number of pennies a player can find/be given.
~~~
penny_rate
1/chance of finding a penny in each room. I.e., bigger # indicates 
smaller chance. 1 indicates 100% chance. 0 shuts off penny finding.
~~~
start_pennies
How many pennies newly made characters begin with.
~~~
command_burst_size
Commands allowed per user in a burst.
~~~
commands_per_time
Commands per time slice after burst.
~~~
command_time_msec
Number of milliseconds in each time slice.
~~~
max_delta_objs
The maximum percentage of the data base that can be changed before
a full dump will be forced.
~~~
max_loaded_objs
Max %of db in unchanged objects allowed to be loaded.  Generally 5% 
This is only needed if you defined DISKBASED in config.h 
~~~
wizhidden_access_bit
Values 1-5 change the level of bit it takes to access wizhidden
'@' props, W1 (Mage) to W5(the MAN).  Read and Write are given.
~~~
userflag_mlev
This is the minimum mlevel a player must be or a program must be
running at to change the userflag (MOBILE).  Change this if your
MUCK uses the userflags for its own purposes, and you dont want
unpriveleged players changing it.
~~~
max_player_name_length
Specifies the maximum size of a player name, up to BUFFER_LEN 
(usually 16384).  If you are using spaces_in_playernames, its a 
good idea to increase this.
~~~
max_process_limit
Max # of timequeue events allowed.
~~~
max_plyr_processes
Max # of timequeue events allowed for any one non-wiz-bitted player.
~~~
max_instr_count
Max # of instrs in uninterruptable muf programs before they are forced
to abort. This limit only affects programs running under non-wiz 
permissions.
~~~
instr_slice
The number of instructions to run before forcing a context switch to
the next waiting muf program. This is for the multitasking interpreter. 
~~~
mpi_max_commands
Max # of instrs in uninterruptable MPI programs before the MPI will abort.
~~~
pause_min
The minimum time in milliseconds the server will pause in select() 
between player input/output servicings. Larger numbers slow FOREGROUND 
and BACKGROUND MUF programs, but reduce CPU usage.
~~~
free_frames_pool
The number of program frames that are always available without having 
to allocate them.  Helps prevent memory fragmentation.
~~~
max_output
Max amount of output text before the <Flushed output> is forced.
~~~
rand_screens
Number of random welcome screens in game/data/welcome directory. 
~~~
listen_mlev
Minimum mucker level for _listen programs on objects.  Programs set
that are less than this level will not be executed from a _listen
propqueue.   
~~~
playermax_limit
Maximum allowed concurrent player connections.
~~~
process_timer_limit
Set this to the number of timers to be allowed per muf program.
~~~
dump_copies
This sets the number of past data base copies to keep in the backup/data
directory on the server. Max is 25, setting it to 0 will disable past
dump saving.
~~~
min_progbreak_lev
This determines the lowest level that can use the @Q command to 
break a foreground program. W2 and above can always do it.
~~~
max_wiz_preempt_count
Sets a hard max instruction count on PREEMPT programs that not 
even wiz-owned programs can exceed. If left at 0, there is no
max limit for PREEMPT programs running under Mage permissions
or higher.
~~~
mcp_muf_mlev
This determines the M level that a player must have to write 
programs that take advantage of MCP related prims.
~~~
mysql_result_limit
Restricts the number of rows that can be returned from
the SQLQUERY prim. Should never set this to over 2000.
If not working with SQL and MUF, don't worry about
this setting.
~~~
web_logfile_lvl
This is the level of debug messages that will be logged to the logs/webserver
file.

 0 = Disable logging
 1 = Log only the request type, URL and hostname (one line)
 2 = Log the request type, URL, hostname, virtual host, referrer and useragent.
 3 = Log the entire request and headers, excluding POST data.
 4 = Log the entire request and headers, including POST data.
 5 = Log all input data, including POST data and system debug messages.
 9 = Log extremely verbose information, only useful to ProtoMUCK developers.

NOTE: Enabling this setting could cause the webserver log to grow very rapidly
on popular servers.

Recommended value: 3
~~~
web_logwall_lvl
This is the level of debug messages that will be logged to the LOGWALL and the
logs/status file.

 0 = Disable logging
 1 = Log only the request type, URL and hostname (one line)
 2 = Log the request type, URL, hostname, virtual host, referrer and useragent.
 3 = Log the entire request and headers, excluding POST data.
 4 = Log the entire request and headers, including POST data.
 5 = Log all input data, including POST data and system debug messages.
 9 = Log extremely verbose information, only useful to ProtoMUCK developers.

NOTE: Setting this higher than 1 will cause the logwall to spit out several
lines of data every time someone accesses the webserver.  If you need extra
logging but don't need to spam the logwall, see: web_logfile_lvl

Recommended value: 1
~~~
web_htmuf_mlvl
This is the minimum mlevel required to be set on a MUF program before the
webserver will attempt to execute it.

Recommended value: 3
~~~
web_max_files
This is the maximum number of file transfers the webserver can currently have
open.  This setting does not override web_max_users.  Set 0 for unlimited.

NOTE: The webserver will be limited based on your platform's available
resources, regardless of this setting.
~~~
web_max_filesize
This is the maximum size (in bytes) of a single file allowed to be accessed by
the fileserver. Set 0 for unlimited.

NOTE: Internal limitations cause a maximum filesize of about 2GB regardless of
this setting, including on 64-bit systems.
~~~
web_max_users
This is the maximum amount of connections permitted to the webserver at once.
Set to 0 for unlimited.

NOTE: The webserver will be limited based on your platform's available
resources, regardless of this setting.
~~~
quit_prog
This sets the MUF program to call when a player types 'QUIT'. 
~~~
login_who_prog
Program to be run when a player types WHO at the login screen.
~~~
player_start
Where newly @pcreated players are placed. Also becomes the 
default home when a player has no other home.
~~~
player_prototype
Dbref of player from which to copy all flags and props when 
a new player is @pcreated. The props copying is optional, 
according to the pcreate_copy_props @tune setting.
~~~
cron_prog
Program to run at the frequency of the cron_interval. 
~~~
www_root
The room that will hold the props that contain HTML or call HTMufs
for the webserver support in ProtoMUCK.
~~~
default_parent
Set this to the room that the in-server @dig should select when no
alternative parent room is located when a new room is made.
~~~
use_hostnames
Do reverse domain name lookup. Turn this parameter of if there is
severe lag when players connect.
~~~
log_commands
Log all commands entered by players to a file.
~~~
log_interactive
Log all commands entered in interactive programs.
~~~
log_connects
Log all connections and disconnections to the MUCK, along with
host names.
~~~
log_failed_commands
Log all unrecognized commands entered by players.
~~~
log_programs
Log all non-wizard owned program text at the time the program is
saved.
~~~
log_guests
Log all actions done by characters that have the G flag set out to
the command log file. 
~~~
log_suspects
Log all actions done by characters that have the SUSPECT flag set 
out to the command log file. 
~~~
log_wizards
When this tune is enabled, wizards commands W1-W5 is always sent to
the commands log despite the value of the log_commands tune.
~~~
log_files
Log the use of the file prims. Keeps track of the names of the files
affected by the file prims, but does not log the actual text written to
or read from the file.
~~~
log_sockets
Log the use of the socket prims. Keeps track of the activity on each
MUF socket descriptor, but does not log the actual data transmitted
through the socket.
~~~
log_failedhelp
When set to 'yes', will log failed attempts to use the in-server 
help commands to a file in the logs/ directory. If something a
player searches for in the help does not have an entry, their
query is logged, or if the help file itself is missing, that 
is logged as well.
~~~
dbdump_warning
Display the save messages for full data base saves.
~~~
db_events
Broadcast DUMP and DUMPWARN events to all running programs for the
corresponding database events. Refer to "man SYSTEM EVENTS2".
~~~
deltadump_warning
Display the save messages for delta dump saves.
~~~
periodic_program_purge
Set this to yes to purge unused programs from RAM. Programs that have
not been used for the length indicated in clean_interval will be taken
out of RAM.
~~~
secure_who
Prevents using WHO from the login screen.
~~~
who_doing
In-server WHO will display the @doing list from the _/do prop on
players.
~~~
realms_control
Makes it so that if a parent room is set WIZARD, the owner of that
parent room becomes a like a 'wizard' for all objects within that
parent room.  NOTE: As of Proto 2.0b4, if the new tune wiz_realms
is off, players are allowed to set B on their own environments to
give it realms control.  Also see "CONTROLS" flag in help
~~~
wiz_realms
Only means anything if realms_control is on.  If set on, this tune
restricts realms control to wizards setting them on rooms. If set
off, then any player can set BUILDER on their environment and get
realms control.  This also applies to those who pass the chown lock
if CONTROLS is also set on the environment room. 
~~~
allow_listeners
Allow listen properties to execute when something is notified to
the object that the listen prop is on.
~~~
allow_listeners_obj
Objects can have listen properties.
~~~
allow_listeners_env
Searches up the room environments for listeners.
~~~
allow_zombies
Allow mortal players to @force around objects that are set ZOMBIE.
~~~
wiz_vehicles
Allow only wizards to @set the VEHICLE flag on Thing objects.
~~~
wiz_puppets
Allow only wizards to @set the ZOMBIE flag on Thing objects.
~~~
wiz_name
Only wizards can change player names.
~~~
recycle_frobs
When a player is @frobbed (@toaded), the object created is 
auto-recycled. 
~~~
m1_name_notify
Force Mucker Level 1 muf progs to prepend names on notify's to 
players other than the using player, and on notify_except's
and notify_excludes.
~~~
teleport_to_player
Allow the use of exits linked to players. 
~~~
secure_teleport
Make using a personal action to leave a room require that the 
source room be controlled by the player, or else be set JUMP_OK.
~~~
exit_darking
Allow players to set exits DARK.
~~~
thing_darking
Allow players to set things DARK.
~~~
dark_sleepers
Sleeping players effectively have the DARK flag set.
~~~
who_hides_dark
Players set DARK do not appear in the in-server WHO list.
~~~
old_priorities
With this defined to 1, exits that aren't on TYPE_THING objects will
always act as if they have at least a Priority Level of 1.
Define this if you want to use this server with an old db, and don't
want to re-set the Levels of all the LOOK, DISCONNECT, and CONNECT 
actions.
~~~
do_mpi_parsing
Turning this off prevents text from being sent through the MPI parser.
~~~
look_propqueues
Turning this on allows _look/ propqueue hooks.
~~~
dump_propqueues
This enables a @dumpwarn and @dump propqueue to be used on #0.
~~~
lock_envcheck
Turning this on allows locks to check down the environment for props.
~~~
diskbase_propvals
Turning this on causes the server to only load props when they are
being used, otherwise they are not stored in RAM. Slows down the 
MUCK but makes it more memory efficient.
~~~
idleboot
Turning this on will boot players once they reach maxidle.
~~~
playermax
Turning this on will enforce the max_players @tune by booting
players who connect once the limit has been reached.
~~~
db_readonly
Turning this on prevents most changes to be made to the data base. 
@newpasswording and @frobbing can still be done, however.
~~~
building
Setting this to no will disable the in-server building commands, such
as @create, @dig, @open.
~~~
all_can_build_rooms
Turning this to yes allows even players with no BUILDER bit to make
rooms.
~~~
restricted_building
Setting this to yes prevents players from making anything unless they
have a BUILDER flag. Is overridden by the all_can_build_rooms option.
~~~
pcreate_copy_props
Setting this to yes will make it so that newly made players will have the
props on the player_prototype copied to them at @pcreation time.
~~~
allow_home
Setting this to no disables the in-server home command.
~~~
enable_idle_msgs
If this is enabled, then the room will be notified with a message if a player 
goes idle, or becomes unidle.
~~~
user_idle_propqueue
If enabled, this will allow _Idle/ and _Unidle to be used, so that not just 
administration can set this propdir.
~~~
use_self_on_command
When this is tuned on (the default), every command a player
executes triggers an update of ones lastused timestamp.  When off
this is disabled, and only a few other events, notably connection,
disconnection, and the TOUCH/USE prims, will update this timestamp.
~~~
quiet_moves
Setting this to yes turns off the '%N has arrived/left.' messages 
when players enter or leave rooms.
~~~
quiet_connects
Setting this to yes will shut off the '%N has connected/disconnected.' 
messages.
~~~
proplist_int_counter
Used to specify whether the system standard for proplist storage is
to use integer or string props for the counter.
~~~
enable_mcp
Setting this to no turns off the MCP version indicator upon connection.
However, it also disables the use of MCP all together. 
~~~
enable_commandprops
Setting this to yes turns on command prop support. Setting it to no shuts off 
the command prop support.
~~~
old_parseprop
When set to 'no', the parseprop prim gets its permissions from the
object on which the prop to be parsed is located. When set to 'yes',
the parseprop prim gets its permissions from the permission bit set
on the MUF program itself.
~~~
mpi_needflag
Setting this to yes will make it so that players and objects must have the
MEEPER bit in order to parse MPI. When a player has been given a MEEPER
bit, they can then set the MEEPER bit on things they own, thus enabling
those objects to active MPI parsing as well.
~~~
guest_needflag
When set to yes, any player marked G will only be able to enter rooms
that have been set with the GUEST flag. When set to no, then players 
with the G flag will be unable to enter rooms set with the GUEST flag.
~~~
mortalwho
When set to yes, wizards have to use WHO ! in order to see wiz-who.
When set to no, wizards will see wiz-WHO by default.
~~~
fb_controls
When set to yes, all wizards over W2 have control over just about
everything on the MUCK. When set to no, the MUCK runs under Neon
Wiz permissions, in which case, no wiz has control over objects
owned by a higher wiz level. For example, W3's would not pass a
'controls' check for an object owned by a W4.
~~~
allow_old_trigs
Setting this to no disables all _ prefixed propqueues. For example, 
_connect, _disconnect, etc., will not work if this is set to no.
Setting it to yes leaves all of those propqueues enabled.
~~~
multi_wizlevels
This @tune can turn off tiered wiz levels. With it on, there
will be W5/W4/W3/W2/W1 (The Neon/Glow scheme). Turning it off
will make it so that there is only #1/W (Fuzzball scheme).
~~~
auto_archive
Setting this to 'no' shuts down all use of the @autoarchive support,
either by the command or by the @tune. Setting it to yes allows W4
and above to run @autoarchive and to set the archive_interval
@tune setting. 
See: 'help @autoarchive' for details.
~~~
optimize_muf
Turning this on enables the byte-code optimizer when compiling
MUF programs. MUF optimization can be turned off on a program
by program basis by setting the program = N.
~~~
compatible_muf_perms
Tuning this on, will change the permissions model for MUF so
that MUF runs at the level of the bit set on it by default,
SETUID runs at the owner of the of the program, HARDUID runs 
at the level of owner of the trigger of the program, and 
QUELL will run it at the permissions of the calling player.
This is as per FB/Glow behaviour.  If you are running a FB
or glow database, best to set this ON, if a Neon or Proto DB
set it off.
~~~
allow_unidle
Allows players to use whatever the unidle_command is set to
without making their character unidle. See the information under
'@tune unidle_command' for an explanation. 
~~~
alt_infinity_handler
Turns on IEEE style handling of infinity and not_a_number 
conditions, so that inf 5 + returns inf (instead of zero), 3 asin 
returns nan (not 0).  
Also errors are only flagged if the inf or nan returned would be
an unexpected result, so inf 5 + does not return an error, but
inf sin returns nan with an error.  This makes it reasonably safe
to use floats without checking if you triggered an error when you
get a zero result, since all error conditions return either inf
(for true floating point overflows) or nan (for 'not a number'
conditions.
~~~
autolinking
When this tune is on, all new actions will be, by default, linked 
to NIL(#-4).  This is generally safer and more convenient than
having them be created unlinked, and allows MPI to be loaded into
the @succ of the action and used right away without special 
treatment.
~~~
spaces_in_playernames
@pcreate and the connect screen will support spaces in player
names if this is enabled. To connect with a character that
has a space in the name, the character name must be enclosed
in ' or " marks.
If this @tune is set to no, any existing characters with
spaces in their name will no longer be able to log in but
their Player object will otherwise not be affected.
~~~
mush_format_escapes
Experimental support for parsing some commonly requested (and
admittedly convenient) MUSH-style text formatting codes. For now
this support is limited to the notification prims for testing.
Resetting of ANSI colors after a %r is a known bug.

%r - Carriage return.
%t - Soft tab. Inserver #define MUSH_TAB defaults to four spaces.
%b - A single character of whitespace. Kinda useless, but easy.
%% - A single escaped %.

All codes are case insensitive.
~~~
strict_mush_escapes
Controls whether or not the % character is gobbled up by unhandled
% codes. Turning this on will provide an experience similar to
what MUSH users expect, while leaving it off will reduce the
amount of accidental interference caused by the presence of a %
character. (similar to what MUCK users are accustomed to with
softcoded %r and %t support)
~~~
web_allow_players
If TRUE, setting will allow players to have a _/www prop on themselves, which
is accessable through http://yourserver/~playername
~~~
web_allow_playerhtmuf
If TRUE and web_allow_players is TRUE, the webserver will be allowed to execute
MUF programs in a player's _/www directory.
~~~
web_allow_htmuf
If TRUE, setting will allow the webserver to execute MUF programs and display
the results as a web page.
~~~
web_allow_vhosts
If TRUE, setting will cause the webserver to check @vhosts propdir on the
webroom and allocate any virtual hosts that might be configured there.  If
FALSE, webserver will assume all domain names go to a single place.
~~~
web_allow_files
If TRUE, setting will allow the webserver to display files located in the
files\public_html directory.
~~~
web_allow_dirlist
If TRUE, setting will allow the webserver to create a directory listing page
for directories with no index.html (or similar) file.
~~~
web_allow_mpi
If TRUE, setting will allow MPI to be executed by the webserver and displayed
on pages.
