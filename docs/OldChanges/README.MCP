MCP 1.0 -- README
-----------------------------------------------------------------------------

MCP is a C-like language that has been added to the NeonMUCK server.
The language is translated from it's C-like syntax into MUF, and then compiled
by the server.

MCP is Copyright(C) 1996 by Joseph L. Traub and Jeremy Blackman.
All Rights Reserved.
Use of this software is governed by the terms and conditions of the NeonMuck
license.  Use of this software in any other way or form without the express
written permission of the authors is prohibited by law.

MANIFEST:
    README		-- this file
    mcputil.c		-- parse tree utility functions
    mcplex.fl		-- flex input file for the lexer
    mcpparse.y		-- bison input file for the parser
    mcpstruct.h		-- definitions of the various structures

NOTE: 
    Compilation of MCP has been tested ONLY with flex, bison and gcc.  It
will most likely require some small porting effort to get it to work with
byacc, lex, yacc, cc, or any other tools.

DESCRIPTION:
    This packages contains all of the code required to rebuild the MCP portion
of NeonMUCK, either as a drop-in to upgrade NeonMuck, or to build a stand
alone translator if you are unfortunate enough to be stuck on an older MUCK
but still want the fun of MCP.  (If this is the case, you might wish to define
OLD_MUCK in the makefile, so that the ++ and -- operators work)

    The MCP language is very similar to C, but has some features of MUF built
in as well.   The easiest way that I know to explain the language is to write
out the BNF and explain what each of the rules means.

    Below, an IDENT is an alphanumeric string that may start with an optional
'\' and end with an optional '?' (to satisfy escaping and some primitives
respectively).  The character '_' is also allowed in the string.  A NUM is
any series of 1 on more digits.  COMMENTS are C-style, either /* */ bracketed
or // until end of line.  // comments may be nested inside of /* */ comments,
but /* */ comments may not be nested.  An OBJECT is either a # sign followed
by a number (optionally negative) or a $ followed by an alphanumeric string
pointing to a registered object.  A STRING is any serious of characters within
a pair of double quotes and not spanning a line.  Escaped characters in strings
are preserved.  The token 'TO_EOL' has been used below to mark that some
constructs (like #ifdef) allow their input to continue to the end of the
current line only, and all text on the line past that token will be used as
part of that construct.  The special symbol EMPTY means that there might be
nothing in that portion of the input.   I made the choice to only allow
the #define, #include, and #undef compiler directives at the global level.
One final thing to note is that MCP is completely untyped.  MCP relies on
MUF to do the type-checking for it, so while  x = 1 + "hello"; is valid
MCP code, the resultant MUF '1 "hello" + x !' is not valid, and MUF will tell
you about it.


program   -> EMPTY
          |  program global
          |  program directive
          |  program funcdef

global    -> COMMENT				: an comment
          |  var vardecl ;			: declare one or more vars
          |  #define IDENT stmnt		: declare a $define construct
          |  #include OBJ			: include the defs from <OBJ>
          |  #undef IDENT			: remove the definition

directive -> #echo TO_EOL			: declare a $echo construct
	  |  #ifdef TO_EOL			: declare a $ifdef construct
	  |  #ifndef TO_EOL			: declare a $ifndef construct
          |  #else				: declare a $else
          |  #endif				: declare a $endif

stmnt	  -> { stmnts }				: a statement can be a block
          |  expr ;				: an expression followed by ;
          |  directive				: a compiler directive (above)
	  |  COMMENT				: an comment
          |  return expr ;			: a return with value
          |  return ;				: a return
          |  break ;				: the break keyword
          |  continue ;				: the continue keyword
          |  var vardecl ;			: declare one or more lvars
	  |  assign ;				: a variable assignment
	  |  if ( cond ) stmnt			: an if construct
	  |  if ( cond ) stmnt 	else stmnt	: an if-else construct
          |  do stmnt while ( cond ) ;		: a do/while loop (until/repeat)
	  |  while ( cond ) do stmnt		: a while/do loop (while/repeat)
	  |  for ( cond ; cond ; cond ) stmnt	: a for loop (becomes a while)
          |  switch ( expr ) { caselist }	: a switch statement
          |  switchall ( expr ) { caselist }	: an alternate switch statement
	  |  newarray ( IDENT , expr )		: make an array of size expr

caselist: -> case_stmt				: a single case statment
          |  caselist case_stmt			: more than one case statement
          |  caselist def_stmt			: cases and a default case

case_stmt -> case expr : stmnt			: actual case syntax

def_stmt  -> default : stmnt			: actual default case syntax

cond	  -> EMPTY				: empty condition
	  |  expr				: an expression
	  |  assign				: an assignment

assign	  -> vardecl = expr			: pop 1 or more vars off stack

stmnts    -> stmnt
          | stmnts stmnt

expr	  -> NUM				: a number
          |  OBJ				: an object
          |  STR				: a string
          |  top				: a keyword for the stack top
          |  IDENT				: a variables' value
          |  IDENT [ expr ]			: an array variables' value
	  |  IDENT ++				: increment variable by 1
          |  IDENT --				: decrement variable by 1
	  |  ( expr )				: expression grouping
	  |  expr + expr			: addition
	  |  expr - expr			: subtraction
	  |  expr * expr			: multiplication
	  |  expr / expr			: division
	  |  expr % expr			: mod
	  |  expr & expr			: bitwise and
	  |  expr | expr			: bitwise or
	  |  expr ^ expr			: bitwise xor
          |  expr << expr			: bitwise shift left
          |  expr >> expr			: bitwise shift right
	  |  expr && expr			: logical and
	  |  expr || expr			: logical and
	  |  expr > expr			: comparison more
	  |  expr < expr			: comparison less
	  |  expr >= expr			: comparison more or equal
	  |  expr <= expr			: comparison less or equal
	  |  expr == expr			: comparison equal
	  |  expr != expr			: comparison not equal
          |  - expr				: unary negation
          |  ! expr				: bitwise not
          |  push ( arglist )			: stores arglist on stack
	  |  IDENT ( arglist )			: call function IDENT with args
	  |  OBJ :: IDENT (arglist)		: call IDENT on OBJ with args

opt_expr  -> EMPTY
	  |  expr

funcdef   -> opt_pub func IDENT ( vars ) stmnt	: declare a function 'IDENT'

opt_pub   -> EMPTY				: function is not public
          |  public				: function is added to publics

arglist   -> EMPTY				: no arguments to the call
	  | expr				: any expression can be an arg
          | arglist , expr			: multiple args

vardecl   -> []					: a blank arg (pops from stack)
	  |  IDENT				: a variable named IDENT
	  |  IDENT [ expr ]			: element of an array
          |  vardecl , IDENT			: multiple args
	  |  vardecl, IDENT [ expr ]		: last arg can be an array ref
          |  vardecl , []			: last arg can be blank too

vars      -> EMPTY				: no args to the function
          |  vardecl				: any normal var declaration


    A few notes about switch statements.   Switch statements in MCP are both
more and less flexible that in C.  They are MORE flexible because both the
switch expression and the case expressions can be generalized expressions
and thus may involve variable evaluation, and all sorts of other things.
The still only test for equality of the two expressions however.  They are
less flexible because in MCP an assignment statement is NOT considered an
expression (it leaves no value on the stack).  Assignments are allowed in
the various looping constructs by some serious hackery and the same hackery
wasn't applicable to switches which at their fundamental level are just a nice
way of packaging up multiple if-statements together.  Unlike in C, the default
case MUST be the last case in the list of cases.
    There are two types of switch statements.  Their main difference is in
what will get executed.  In a switch() { ... } statement, only the first case
that matches will get evaluated.  In a switchall() { ... } statement, EVERY
case that matches will be evaluated.  In this form a default case will ALWAYS
be exected!

    If you have any problems or encounter any bugs with this software, please
contact jtraub@dragoncat.net (Joseph Traub) or loki@dragoncat.net (Jeremy
Blackman).  Either or both of us will be more than happy to entertain ideas
or enhancements about how to make this better.
